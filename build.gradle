buildscript {
    dependencies {
        classpath 'org.eclipse.jgit:org.eclipse.jgit:5.10.0.202012080955-r'
    }
}

plugins {
    id 'com.github.ben-manes.versions' version '0.27.0'
}

apply plugin: 'maven-publish'
apply plugin: 'jacoco'
apply plugin: 'java-library'

project.ext {
    GIT_INFO = gitInfo(rootProject.file('.'))
}

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

group 'net.minecraftforge'
version = "${project.ext.GIT_INFO.tag}.${project.ext.GIT_INFO.offset}"

repositories {
    mavenCentral()
    maven {
        name = 'forge'
        url = 'https://maven.minecraftforge.net'
    }
}

jacoco {
    toolVersion = '0.8.2'
}

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

dependencyUpdates {
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }
}

test {
    useJUnitPlatform()
}

ext.sharedManifest = manifest {
    attributes(['Specification-Title': 'forgespi',
                'Specification-Vendor': 'forge',
                'Specification-Version': '3', // Currently version 3 of the forgespi specification
                'Implementation-Title': project.name,
                'Implementation-Version': "${project.version}+${System.getenv('BUILD_NUMBER')?:0}+${GIT_INFO.branch}.${GIT_INFO.abbreviatedId}",
                'Implementation-Vendor': 'forge',
                'Implementation-Timestamp': java.time.Instant.now().toString(),
                'Git-Commit': GIT_INFO.abbreviatedId,
                'Git-Branch': GIT_INFO.branch,
                'Build-Number': "${System.getenv('BUILD_NUMBER')?:0}"],
            "net/minecraftforge/forgespi/")
}

jar {
    manifest = project.manifest {
        from sharedManifest
    }
}

task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}


dependencies {
    implementation('cpw.mods:modlauncher:5.1.+')
    implementation('com.google.code.findbugs:jsr305:3.0.2')
    implementation('org.ow2.asm:asm:7.2')
    implementation('org.ow2.asm:asm-commons:7.2')
    implementation('org.ow2.asm:asm-tree:7.2')
    implementation('org.apache.logging.log4j:log4j-api:2.11.2')
    implementation('org.apache.maven:maven-artifact:3.6.3')


    testRuntimeOnly('org.apache.logging.log4j:log4j-core:2.11.2')
    testImplementation('org.junit.jupiter:junit-jupiter-api:5.6.+')
    testImplementation('org.powermock:powermock-core:2.0.+')
    testImplementation('org.hamcrest:hamcrest-core:2.2+')
    testImplementation('org.junit.jupiter:junit-jupiter-engine:5.6.+')
}

artifacts {
    archives jar
    archives sourcesJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            pom {
                name = 'Forge Service Provider Interface'
                description = 'API for services which can plug into forge, or which are used by forge in other places'
                url = 'https://github.com/MinecraftForge/ForgeSPI'
                scm {
                    url = 'https://github.com/MinecraftForge/ForgeSPI'
                    connection = 'scm:git:git://github.com/MinecraftForge/ForgeSPI.git'
                    developerConnection = 'scm:git:git@github.com:MinecraftForge/ForgeSPI.git'
                }
                issueManagement {
                    system = 'github'
                    url = 'https://github.com/MinecraftForge/ForgeSPI/issues'
                }

                licenses {
                    license {
                        name = 'LGPLv2.1'
                        url = 'https://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt'
                    }
                }

                developers {
                    developer {
                        id = 'cpw'
                        name = 'cpw'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            if (System.env.MAVEN_USER) {
                url 'https://maven.minecraftforge.net/'
                authentication {
                    basic(BasicAuthentication)
                }
                credentials {
                    username = System.env.MAVEN_USER ?: 'not'
                    password = System.env.MAVEN_PASSWORD ?: 'set'
                }
            } else {
                url 'file://' + rootProject.file('repo').getAbsolutePath()
            }
        }
    }
}

def gitInfo(dir) {
    String.metaClass.rsplit = { String del, int limit = -1 ->
        def lst = new ArrayList()
        def x = 0, idx
        def tmp = delegate
        while ((idx = tmp.lastIndexOf(del)) != -1 && (limit == -1 || x++ < limit)) {
            lst.add(0, tmp.substring(idx + del.length(), tmp.length()))
            tmp = tmp.substring(0, idx)
        }
        lst.add(0, tmp)
        return lst
    }

    def git = null
    try {
        git = org.eclipse.jgit.api.Git.open(dir)
    } catch (org.eclipse.jgit.errors.RepositoryNotFoundException e) {
        return [
                tag: '0.0',
                offset: '0',
                hash: '00000000',
                branch: 'master',
                commit: '0000000000000000000000',
                abbreviatedId: '00000000'
        ]
    }
    def desc = git.describe().setLong(true).setTags(true).call().rsplit('-', 2)
    def head = git.repository.exactRef('HEAD')
    def longBranch = head.symbolic ? head?.target?.name : null // matches Repository.getFullBranch() but returning null when on a detached HEAD

    def ret = [:]
    ret.tag = desc[0]
    ret.offset = desc[1]
    ret.hash = desc[2]
    ret.branch = longBranch != null ? org.eclipse.jgit.lib.Repository.shortenRefName(longBranch) : null
    ret.commit = org.eclipse.jgit.lib.ObjectId.toString(head.objectId)
    ret.abbreviatedId = head.objectId.abbreviate(8).name()

    return ret
}